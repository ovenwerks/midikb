midikb - A keyboard shortcut daemon and Keyboard event to Jack MIDI converter



Contents:

    1. Introduction
    2. Platforms
	2.1. Platform-specific information
    3. Setup
	3.1. Compilation
	3.2. Installation
	3.3. Configuration
	3.3.1. Supported command attributes
	3.4. Running
    4. Internals
    5. License
    6. Authors


1. Introduction

midikb is a simple daemon that binds actions to keyboard events. It recognises 
key combinations and can handle press, repeat and release events. Currently it 
only supports the linux-2.6+ evdev interface, but the platform-specific code is 
well-contained, so that support for additional platforms can be added with no or 
minimal changes to the rest of the code.

It uses a plain-text configuration file which contains all the bindings. As well
as executing external Commands, midikb  can also send and receive jackd MIDI
commands as well as control Jackd transport.

Please keep in mind that the manual creation of a configuration file can be very
complex, especially if some of the more advanced features are required. Unless
you enjoy mind games, you might wish to stick to the more simple configuration
rules...

I have included two sample files, One which takes a computer keyboard and emulates
a Mackie Control Surface and one that takes a WiiMote and provides a subset of the
MCP commands.


2. Platforms

Currently only the following platform is supported:

* Linux 2.6.x and on. We are onto Linux4.* and it still works.

Unless someone else wants to do the port, it will stay that way.

2.1. Platform-specific information

* Linux 2.6.x and up

To run midikb under Linux 2.6.x you need to have the event interface available. 
In most cases, loading the `evdev' kernel module will be sufficient:

# modprobe evdev

In Linux 3.* and up this seems to be default.

While actkbd recommended starting with a udev call, this will not work for jackd
use which runs as a non-system user. Instead I suggest including the user in the
input group and using the udev file in the samples directory which makes the event
files accessable to that group. This file can be dropped into the /lib/udev/rules.d/
directory in debian based distros (like Ubuntu) or /etc/udev/rules.d/ otherwise.

In most Linux systems the device nodes to use are named /dev/input/eventX, where
X is a decimal unsigned number, e.g. /dev/input/event0.  Also look for /dev/input/by*
directories that have more descriptive names in them. The "by-path" directory can
give device names that stay the same from one boot to the next.


3. Setup

3.1. Compilation

A simple call to `make' is normally all you need to compile midikb:

$ make

To change the default location of the configuration file, you have to override 
the sysconfdir Makefile variable. You can also override the CFLAGS variable to 
provide optimisation flags e.t.c. The DEBUG variable can be used to enable 
debugging - if you are using gcc, setting DEBUG to "-g" would probably do.


3.2. Installation

First verify with `make -n install' the installation paths. By default, the 
installation prefix is /usr/local.  A configuration placeholder is placed in
$(sysconfdir), which by default is /etc. You can set the prefix and sysconfdir
variables to override these defaults. Then run `make install' as root to 
perform the actual installation.

Note: I need to move the default config dir to ~/.config/midikb

# make install

Bear in mind that currently the location of the configuration file must be 
explicitly specified (-c) in the midikb command line options if the default 
($(sysconfdir)/midikb.conf) location is not valid.  Generally using the
command line seems to be best as the device has to be specified anyway.


3.3. Configuration

The default configuration file resides in $(sysconfdir)/midikb.conf. It is a 
plain-text file with each line being an entry. A proper entry has the following 
format:

<keys>:<event type>:<attributes>:<command>

The <keys> field is a series of numeric keycodes, separated by the `+' 
character. `midikb -n -s' can be used to find out any keycodes you need, as it 
will report all key presses without executing any commands.

The <event type> string field is a comma or whitespace separated list of the
`key' (key press event), `rep' (key repeat event) and `rel' (key release event)
strings. This field indicates which keyboard events this entry corresponds to.
If left empty, it defaults to `key'. There is also a led event type. This tells
midikb that an incoming MIDI key press (specified in Command) should be used
as a ledon signal. Only three of these can be used as there are only three leds
on the keyboard.

The led line looks like this:
98:led:ledon(0):73
The 98 is only a place holder because the config parser expects something there.
ledon(0) as described below deals with the first LED (the LEDs are 0,1 and 2)
73 is the midi key number in hex. The whole MIDI event that this would trap would
be:
90 73 7f - turn LED on
90 73 01 - turn LED on (flashing maybe in future)
90 73 00 - turn LED off 
(73 happens to be the mackie SOLO light)


The <attributes> field contains an optional comma or whitespace separated list
of attributes. The listed attributes can modify the execution of the supplied
command or change the state of midikb in order to perform complex actions. The
attribute actions are executed in the listed order. If no attribute has been
specified midikb falls back on to calling system().

The <command> field is the executed command that will be passed to system().
Note that in order to have non-blocking behaviour, you have to append the `&' 
character to the command, so that /bin/sh will execute it in the background.
Also keep in mind that the listed command attributes can affect the way the
command is executed, if at all. This is also the place where the parameters
Are put for any of the Jack Attributes. The Jack attributes force noexec, so
that exec and jack*, fader, control are mutually exclusive. It is one or the
other but not both.


Lines starting with '#' are considered comments. Invalid lines are silently 
ignored, unless a high enough verbosity level has been specified.

Note that when midikb searches for an entry to execute, only the first matching
entry is used. Therefore always make sure that the entries in the configuration
file are ordered properly. This is very important if you are using some keys as
modifiers, the modifier needs to be set at the bottom of the file. mcp.conf in
the samples directory shows this. (there are some other tricks to make this work
too)

A sample midikb.conf file is included in the midikb distribution.


3.3.1. Supported command attributes

The supported attributes are:

* `grab': This grabs the keyboard device to block other applications from
	receiving the subsequent events. This allows the user to bind commands
	to keys that are not normally usable because they produce symbols that
	mess with regular keyboard operation (letters, numbers e.t.c.).

* `ungrab': This releases a grabbed device, so that other programs may get the
	key events. Please note that at least some versions of the X keyboard
	driver (and possibly other programs) will interpret a key release event
	as a full key press/release sequence even if the press event was never
	received (why?). Therefore you may prefer to use the `ungrab' attribute
	in release event bindings, rather than keypress ones, to ensure correct
	operation.

WARNING: Using the `grab' attribute without a well thought way to invoke the
	`ungrab' command can easily leave your keyboard unusable for all other
	applications with no way out. You may want to invoke something like the
	following:

	# sleep 120; killall -9 midikb

	in a different console, while testing you configuration, to be able to
	reclaim your keyboard even if the configuration file is not correct.

	For MIDI use, grabbed is probably the way this will be used with a second
	keyboard plugged into a USB port. With two keyboards there is always an
	ungrabbed keyboard to use so getting locked out is not as big of a problem.


* `grabbed': This instructs midikb to execute the specified command only if the
	keyboard has been grabbed. This can be used to allow a key to act as an
	extra Function key that adds extra functionality to the other keys.

* `ungrabbed': This instructs midikb to execute the specified command only if
	the keyboard has not been grabbed.

NOTE: If none of the `grabbed'/`ungrabbed' attributes has been used, the command
	is always executed if the key mask matches. If both are specified then
	the command is never executed - obviously the keyboard cannot be grabbed
	and ungrabbed at the same time.

NOTE: for MIDI use this will generally not be used but midikb will be started in
	grab mode from the command line.

* `noexec': Do not call system() to run an external command. Useful for entries
	that only serve configuration purposes.

* `exec': Use system() to run an external command here and now. Allows specific
	ordering of the attribute actions with regard to the system() call.

NOTE: If none of the `noexec'/`exec' attributes has been specified, or if the
	attribute list is empty, an `exec' call is implied at the end of the
	list. Always use `noexec' for entries with empty/invalid commands.

* `jackt': is the jack transport attribute It means the command will be sent
	to jacks transport section. The commands that go with this are:
	* (all are case sensitive) 
	roll or r sends a roll command 
	stop or s sends a stop command 
	zero or z locate to 0 
	forward or f move location ahead 1 sec (at 48000) 
	Fast or F move location ahead 10 sec (at 48000) 
	back or b move location back 1 sec (at 48000) 
	Back or B move back 10 sec (at 48000) 
	example: 96:key:jackt:roll makes jacktransport start rolling with numpad enter.
	Note: the application(s) must be setup to use jack transport.

Note: in both fader and control, the fader/controller number is the midi 
two digit hex number and the offset is a decimal number. This is for
convenience as the fader numbers are all listed in my documentation as
hex and offsets make sense in decimal (to me).
	
* `fader': This assigns the command to increment/decrement one of 16 memories
	as pitch bend. This is what the MCP surfaces use for faders. The associated
	memory will also be set by incoming MIDI pitchbend events for the same channel.
	The commands that go with the fader attribute are:
	[fader number (0 to f)] [offset]
	example:
	# fade up
	38:key:fader:04 01
	38:rep:fader:04 04
	# fade down
	52:key:fader:04 -1
	52:rep:fader:04 -4
	pressing key 38 will move the fader up one tick, holding down till key starts
	repeat move fader up 4 ticks per repeat. Pressing key 52 will move the fader
	down. midikb will send the value thus calculated as a pitch bend event on 
	midi channel 5 (00 is one). The internal parameter will be updated by any
	incoming pitchbend event such as would be generated by moving the fader
	with a mouse or a bank shift event. The actual MIDI event will be e4 ll hh
	where ll is the lower 7 bits and hh is the high 7 bits.
	
* `control': Similar to the fader, but can be one of 128 CC on channel 1. This
	also increments decrments a memory location and respondes to MIDI CC events
	to the same controller. The command is [CC number (0 to 7f)] [offset]
	Example:
	# up
	22:key:control:13 01
	22:rep:control:13 01
	# down
	23:key:control:13 -1
	23:rep:control:13 -1
	The actual MIDI event would be B0 13 [memvalue 0-7f]

	
* `jackm': These are jack midi events. Singles events are expected, So
	multi-event commands like NRPNs will not work. Short sysexe events are OK.
	Nothing is stored and this does not respond to incoming MIDI. The command
	in this case is the MIDI event to be sent.
	Key press example:
	51:key:any,jackm:90 13 7f
	51:rel:any,jackm:90 13 00
	generally a press and release are needed
	
	jackm can also be used to do "encoder" events such as mackie "v-pots".
	# pan, use two keys to pretend encoder - no release
	# pan-left
	22:key:any,jackm:b0 13 41
	22:rep:any,jackm:b0 13 41
	# pan-right
	23:key:any,jackm:b0 13 01
	23:rep:any,jackm:b0 13 01
	The 41 is a -1 (at least for MCP)
	and the 01 is a plus 1. One tick up for one key and one tick down for another.
	No values are stored because this is done at the host end.


* `ignrel': When changing the internal state of midikb, ignore release events
	for the keys that are currently pressed. This allows more complex key
	combinations where the shortcut keys are pressed sequentially, rather
	than simultaneously. When the key combination is completed, the `allrel'
	and `rcvrel' attributes should be used to clear the key mask and to
	resume the proper reception of release events.

* `allrel': Clear the pressed key mask. It is the equivalent of releasing all
	pressed keys, but is not affected by the `ignrel' attribute.

* `rcvrel': Restore proper reception of key release events.

* `key(X)': Send a key X press event to the input layer of the system.

* `rel(X)': Send a key X release event to the input layer of the system.

* `rep(X)': Send a key X repeat event to the input layer of the system.

WARNING: Note that the careless use of the key event injection commands can make
	your life really adventurous - or just difficult. For example injecting
	a `return' key press/release sequence after the `r' key is a way to make
	logging on locally as "root" really, really difficult. Of course you may
	still be able to login using a user without an "r" in their username and
	password and issuing `su', but you'd still need a root password without
	an "r" in it...

WARNING: The `key()', `rel()' and `rep()' attributes, if used without caution,
	may cause event loops that can bring the system to its knees. Also, it
	seems that continuous event loops can cause midikb to miss some events,
	or even block the event interface, with various dire results. Use with
	extreme caution.

* `set(X)': Manipulate the internal midikb state, by setting the key X status to
	`pressed'.

* `unset(X)': Manipulate the internal midikb state, by setting the key X status
	to `released'.

NOTE: `set()' and `unset()' supersede the normal operations associated with the
	received events, if they are in conflict.

NOTE: By using `set()' and `unset()' with key values that are not producable by
	your keyboard, but are still valid, you can create complex configuration
	schemes by using those key values as status variables.

NOTE: An empty value for the `key()', `rel()', `rep()', `set()' and `unset()'
	attributes instructs midikb to use the key value that triggered the
	current rule.

* `not': Indicates that the current entry will match when any key except for the
	listed ones is received. This attribute can be used along with an empty
	<keys> field to match all events, regardless of the keycode.

* `all': Indicates that the current entry will match when all of the listed keys
	are pressed, without caring about the state of any other keys.

* `any': Indicates that the current entry will match when any of the listed keys
	is pressed. Not very sure what this can be used for, but it seemed nice
	to have :-)

NOTE: The `not', `all' and `any' attributes are checked in this exact order and
	if more than one have been specified, the one with the highest priority
	supersedes all others. If none of these attributes has been specified,
	then midikb will require an exact match between the listed keys and the
	active key mask in order to execute the entry.

* `ledon(X)': Switches on the keyboard LED X.

* `ledoff(X)': Switches off the keyboard LED X.

NOTE: midikb does not check which LEDs actually exist on the keyboard, but this
	does not cause any problems as invalid LED values are simply ignored.

NOTE: Setting the LEDs this way is not permanent. Any operation that affects
	a LED (e.g. pressing the Caps Lock key) can affect one or even all
	LEDs, thus nullifying the operations from midikb.

NOTE: You will have to use some other way to find what LED codes your keyboard
	supports. On Linux the /proc/bus/input/devices file can supply this
	information: the LED= field is a bitwise mask of the present LEDs. For
	example, if it's 7 (binary: 111), all first three LEDs are available.


3.4. Running

Run `midikb --help' to see the various command line options.

        -c, --config <file>     Specify the configuration file to use
        -D, --daemon            Launch in daemon mode
        -d, --device <device>   Specify the device to use
        -h, --help              Show this help text
        -g, --grab              Start with device grabbed
        -n, --noexec            Do not execute any commands
        -p, --pidfile <file>    Use a file to store the PID
        -q, --quiet             Suppress all console messages
        -v[level]
        --verbose=[level]       Specify the verbosity level (0-9)
        -V, --version           Show version information
        -x, --showexec          Report executed commands
        -s, --showkey           Report key presses
        -l, --syslog            Use the syslog facilities for logging


Note that sending the HUP signal (kill -HUP) to midikb will cause it to reload 
its configuration file.

Note that some of these are leftovers from actkbd days and are not really useful
when run as a user.

a run command to use a second keyboard as a MIDI controller might look like this:

midikb -g -d /dev/input/event6 -c ~/.config/midikb/mcp.conf

For finding key codes try:

midikb -s -n -d /dev/input/event6
(replace the 6 with the one belonging to you device)

4. Internals

The most interesting/messy part of midikb is the code that keeps track of which 
keys are pressed each moment. It uses a bitmask with one bit for each available 
key. When press/repeat events are received, the corresponding bit is set and it 
becomes unset when a release event is received for that key. To match key events 
with the corresponding actions, each valid configuration file entry has its key 
field transformed to a bitmask. After that, whenever a new event is received, 
the status bitmask is matched against all configuration entry bitmasks and the 
first one to match (if any) is used and the corresponding command is executed.

Please note that the platform specific code is contained in <platform>.c (.e.g. 
linux.c). This file implements a generic interface to keyboard events, hiding 
each system's intricacies from the rest of code. It is also the file that has to 
be written/ported to add support for a new platform.

For any additional details the best documentation is probalby the source code 
itself.


5. License

midikb is released under the GNU General Public License version 2. The full text 
of the license can be found in the COPYING file that should be included in the 
midikb distribution.


6. Authors

Original author Of actkbd:
    Theodoros V. Kalamatianos <nyb@users.sourceforge.net>

Author of Jackd aditions and midikb Fork:
	Len Ovens <len at ovenwerks dot net>
